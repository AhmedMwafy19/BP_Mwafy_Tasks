Q1
1. No,It's O(n)
2. Yes
3.No,O(1)

Q2
1.O(g(n))=O(n^3)
O(f(n))=O(n^3)
then they're equal

2.O(g(n))=O(2^n)
2^(n+1)=2*(2^n)
O(f(n))=(2^n)
then they're equal

3.O(g(n))=(log(n))
O(f(n))=O(log(n))
then they're equal


Q3
1.f(n)=n^3
O(g(n))= >n^2 which could equal n^3
2.f(n)=log(n)
worst case of g(n) is >= log(n)

Q4 Worst-case running time=O(g(n)), because for worst-case inputs, the running time is bounded above by 0g(n)
.Best-case running time= Ω(g(n))Best-case running time=Ω(g(n)), because for best-case inputs, the running time is bounded below by
g(n).

Q5 Ω(g(n)) require f(n) to grow at least as fast as g(n) for large n
Θ(g(n)) requires f(n) to both grow at least as fast as g(n) and \
at most as fast as g(n) for large n.
then it's empty
